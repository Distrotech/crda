{"name":"Crda","tagline":"Mirrror of git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/crda.git","body":" Central Regulatory Domain Agent (CRDA)\r\n========================================\r\n\r\nThis is the Central Regulatory Domain Agent for Linux. It serves one\r\npurpose: tell Linux kernel what to enforce. In essence it is a udev\r\nhelper for communication between the kernel and userspace. You only\r\nneed to run this manually for debugging purposes. For manual changing\r\nof regulatory domains use iw (iw reg set) or wpa_supplicant (feature\r\nyet to be added).\r\n\r\n HOST REQUIREMENTS\r\n===================\r\n\r\nCRDA is provided as a binary file so all the host needs is libc/uclibc.\r\nYou will also need udev and at least libnl1.\r\n\r\n BUILD REQUIREMENTS\r\n====================\r\n\r\nThe package build requirements currently are:\r\n\r\n * python and the m2crypto package (python-m2crypto)\r\n * libgcrypt or libssl (openssl) header files\r\n * nl library and header files (libnl1 and libnl-dev)\r\n   available at git://git.kernel.org/pub/scm/libs/netlink/libnl.git\r\n * RSA public key of John Linville, we include this as part of this package\r\n   so you do not need to install it. This RSA public key comes\r\n   from the wireless-regdb.git tree and we keep it up to date here.\r\n * regulatory database, clone this tree:\r\n\r\n   git://git.kernel.org/pub/scm/linux/kernel/git/linville/wireless-regdb.git\r\n\r\n   and then stuff regulatory.bin (no need to build) provided there in\r\n   REG_BIN location specified in this Makefile. This regulatory.bin file\r\n   is only required to verify the CRDA built here can read its database file\r\n   which has been signed with the RSA private key.\r\n\r\n CALLING CRDA -- UDEV\r\n======================\r\n\r\nDistributions can set up a udev rule to allow the kernel's regulatory\r\ndomain change request to be reviewed by CRDA so CRDA can pass an\r\nappropriate regulatory domain. An example regulatory rule is provided\r\nwith this package as regulatory.rules\r\n\r\n OVERVIEW\r\n==========\r\n\r\nThe database is maintained on the wireless-regdb.git tree. This git\r\ntree maintains a binary regulatory database file which is produced\r\nusing its own ASCII db.txt into binary form for size efficiency. The\r\ncontents of the binary database are then signed using the private key.\r\n\r\nCRDA will use regulatory.bin if its signature checks out with the public\r\nkey provided. This will prevent us from using corrupted data (in case\r\nof hard drive failure) in the running kernel. This separation between\r\nCRDA and the regulatory database also allows us to provide regulatory\r\nupdates on distributions without having to require an update on CRDA.\r\n\r\nNote that upon updating the regulatory database it is advised the\r\nuser reboots or all the wireless modules get unloaded and reloaded.\r\n\r\nUnder certain circumstances it may be desirable to have the regulatory\r\nagent accept multiple keys, this can be achieved by stuffing all the keys\r\ndesired into pubkeys. Right now we only use John Linville's public key.\r\n\r\n REGDB AUTHORS\r\n===============\r\n\r\nAuthors of regulatory.bin (John Linville) first need a private key, which can\r\nbe generated with something like this:\r\n\r\n\topenssl genrsa -out your.key.priv.pem 2048\r\n\r\nYou'll then need to generate the public key and publish it. You\r\ncan generate it as follows:\r\n\r\n\topenssl rsa -in your.key.priv.pem -out your.key.pub.pem -pubout -outform PEM\r\n\r\nThen with this key you can generate regulatory.bin files like this:\r\n\r\n\t./utils/db2bin.py regulatory.bin db.txt your.key.priv.pem\r\n\r\n MAGIC PATTERN\r\n===============\r\n\r\nUse the following magic(5) pattern to recognise CRDA binary regulatory\r\ndatabase files:\r\n\r\n---- %< ----\r\n# CRDA Regulatory database file\r\n# http://git.kernel.org/?p=linux/kernel/git/mcgrof/crda.git;a=summary\r\n# (see regdb.h)\r\n0\tbelong\t\t0x52474442\tCRDA regulatory database file\r\n>4\tbelong\t\t19\t\t(Version 1)\r\n---- >% ----\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}